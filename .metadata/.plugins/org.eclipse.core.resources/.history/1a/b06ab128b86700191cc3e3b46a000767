package pe.com.tintegro.controller;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ActualizarAgenteRequest;
import pe.com.tintegro.dto.request.BuscarAgentePorNumRequest;
import pe.com.tintegro.dto.request.BuscarAgenteRequest;
import pe.com.tintegro.dto.request.EliminarAgenteRequest;
import pe.com.tintegro.dto.request.InsertarAgenteRequest;
import pe.com.tintegro.dto.request.ListarAgenteRequest;
import pe.com.tintegro.dto.request.ListarColasDisponiblesRequest;
import pe.com.tintegro.dto.response.ActualizarAgenteResponse;
import pe.com.tintegro.dto.response.BuscarAgentePorNumResponse;
import pe.com.tintegro.dto.response.BuscarAgenteResponse;
import pe.com.tintegro.dto.response.EliminarAgenteResponse;
import pe.com.tintegro.dto.response.InsertarAgenteResponse;
import pe.com.tintegro.dto.response.ListarAgenteResponse;
import pe.com.tintegro.dto.response.ListarColasDisponiblesResponse;
import pe.com.tintegro.services.AgenteServices;
import pe.com.tintegro.services.util.Util;


@RestController
@RequestMapping("/agente")
public class AgenteController
{
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());
	@Resource(name = "agenteServices")
	protected AgenteServices agenteServices;	
//
	@RequestMapping(value = "/insertar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public InsertarAgenteResponse insertarAgente(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody InsertarAgenteRequest request){
		
		InsertarAgenteResponse response =new InsertarAgenteResponse();
		try
		{
			response = agenteServices.insertarAgente(codUsuario, idInstancia, request);
			response.setSalida(response.getSalida());
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido agregar Agente");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}
	
	@RequestMapping(value = "/listar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarAgenteResponse listarAgente(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarAgenteRequest request){
		
		ListarAgenteResponse response =new ListarAgenteResponse();
		try
		{
			response = agenteServices.listarAgente(codUsuario, idInstancia);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Agentes Realizadas");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido Consultar Agente");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}	
	
	@RequestMapping(value = "/actualizar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ActualizarAgenteResponse actualizarAgente(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ActualizarAgenteRequest request){
		
		ActualizarAgenteResponse response =new ActualizarAgenteResponse();
		try
		{
			response = agenteServices.actualizarAgente(codUsuario, idInstancia, request);
			response.setActualizado(response.getActualizado());
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido actualizar Agente");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}	
	
	@RequestMapping(value = "/eliminar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public EliminarAgenteResponse actualizarAgente(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody EliminarAgenteRequest request){
		
		EliminarAgenteResponse response =new EliminarAgenteResponse();
		try
		{
			response = agenteServices.eliminarAgente(codUsuario, idInstancia, request);
			response.setEliminado(response.getEliminado());
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido eliminar Agente");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}	
	
	@RequestMapping(value = "/buscar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public BuscarAgenteResponse buscarAgente(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody BuscarAgenteRequest request){
		
		BuscarAgenteResponse response =new BuscarAgenteResponse();
		try
		{
			response = agenteServices.buscarAgente(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Agentes Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido Consultar Agente");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;	
	}
	
	@RequestMapping(value = "/buscarPorNum", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public BuscarAgentePorNumResponse buscarAgentePorNum(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody BuscarAgentePorNumRequest request){
		
		BuscarAgentePorNumResponse response =new BuscarAgentePorNumResponse();
		try
		{
			response = agenteServices.buscarNumAgente(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Agentes Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido Consultar Agente");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;	
	}	
	
	@RequestMapping(value = "/listarCola", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarColasDisponiblesResponse listarColaDisponible(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarColasDisponiblesRequest request){
		
		ListarColasDisponiblesResponse response =new ListarColasDisponiblesResponse();
		try
		{
			response = agenteServices.listarColaDisponible(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Colas Realizadas");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido Consultar Colas");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}		
}

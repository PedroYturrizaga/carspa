package pe.com.tintegro.controller;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ActualizarCentralExternaRequest;
import pe.com.tintegro.dto.request.EliminarCentralExternaRequest;
import pe.com.tintegro.dto.request.InsertarCentralExternaRequest;
import pe.com.tintegro.dto.request.ListarCentralExternaRequest;
import pe.com.tintegro.dto.request.ValidarDireccionIPRequest;
import pe.com.tintegro.dto.response.ActualizarCentralExternaResponse;
import pe.com.tintegro.dto.response.EliminarCentralExternaResponse;
import pe.com.tintegro.dto.response.InsertarCentralExternaResponse;
import pe.com.tintegro.dto.response.ListarCentralExternaResponse;
import pe.com.tintegro.dto.response.ValidarDireccionIPResponse;
import pe.com.tintegro.services.CentralExternaServices;
import pe.com.tintegro.services.util.Util;

@RestController
@RequestMapping("/centralExterna")
public class CentralExternaController
{
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());
	@Resource(name = "centralExternaServices")
	protected CentralExternaServices centralExternaServices;

	// Lista central Externa
	@RequestMapping(value = "/listaCentralExterna", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ListarCentralExternaResponse listarCentralExterna(@RequestBody ListarCentralExternaRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia)
	{
		ListarCentralExternaResponse response = new ListarCentralExternaResponse();
		
		try
		{
			response = centralExternaServices.listaCentralExterna(codUsuario, idInstancia, request);
			String codError = Constantes.ESTADO_TRAMA_OK + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Se cargo la lista correctamente");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar las centrales Externas");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}

		return response;
	}

	// Insertar Central Externa
	@RequestMapping(value = "/insertarCentralExterna", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public InsertarCentralExternaResponse insertarCentralExterna(@RequestBody InsertarCentralExternaRequest request, @RequestHeader("codUsuario") String codUsuario,

	@RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{

		InsertarCentralExternaResponse response = new InsertarCentralExternaResponse();
		try
		{
			response = centralExternaServices.insertarCentralExterna(codUsuario, idInstancia, request);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se pudo guardar los datos");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);

		}

		return response;

	}

	// Actualizar Central Externa
	@RequestMapping(value = "/actualizarCentralExterna", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ActualizarCentralExternaResponse actualizarCentralExterna(@RequestBody ActualizarCentralExternaRequest request, @RequestHeader("codUsuario") String codUsuario,
			@RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{

		ActualizarCentralExternaResponse response = new ActualizarCentralExternaResponse();
		try
		{
			response = centralExternaServices.actualizarCentralExterna(codUsuario, idInstancia, request);
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible actualizar la central Externa");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;

	}

	// Eliminar Central Externa
	@RequestMapping(value = "/eliminarCentralExterna", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public EliminarCentralExternaResponse eliminarCentralExterna(@RequestBody EliminarCentralExternaRequest request, @RequestHeader("codUsuario") String codUsuario,
			@RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{

		EliminarCentralExternaResponse response = new EliminarCentralExternaResponse();
		try
		{
			response = centralExternaServices.eliminarCentralExterna(codUsuario, idInstancia, request);
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible eliminar la central Externa");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;

	}

	// Validar direccion IP
	@RequestMapping(value = "/validarDireccionIP", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ValidarDireccionIPResponse validarDireccionIP(@RequestBody ValidarDireccionIPRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia)
	{
		ValidarDireccionIPResponse response = new ValidarDireccionIPResponse();

		try
		{
			response = centralExternaServices.validarDireccionIP(codUsuario, idInstancia, request);
			String codError = Constantes.ESTADO_TRAMA_OK + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Se cargo la lista correctamente");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar las centrales Externas");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}

		return response;
	}
}

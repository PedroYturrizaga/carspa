package pe.com.tintegro.controller;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ActualizarAreaCentroCostRequest;
import pe.com.tintegro.dto.request.EliminarCentroCostoxAreaRequest;
import pe.com.tintegro.dto.request.InsertarAreaCentroCostRequest;
import pe.com.tintegro.dto.request.ListarCentroCostoxAreaRequest;
import pe.com.tintegro.dto.response.ActualizarAreaCentroCostResponse;
import pe.com.tintegro.dto.response.EliminarCentroCostoxAreaResponse;
import pe.com.tintegro.dto.response.InsertarAreaCentroCostResponse;
import pe.com.tintegro.dto.response.ListarCentroCostoxAreaResponse;
import pe.com.tintegro.services.AreaCentroCostoService;
import pe.com.tintegro.services.util.Util;

@RestController
@RequestMapping("/areaCentroCosto")
public class AreaCentroCostoController
{
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());

	@Resource(name = "areaCentroCostoService")
	protected AreaCentroCostoService areaCentroCostoService;

	@SuppressWarnings("static-access")
	@RequestMapping(value = "/insertarArea", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public InsertarAreaCentroCostResponse insertarArea(@RequestBody InsertarAreaCentroCostRequest request, @RequestHeader("codUsuario") String codUsuario,

	@RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{

		InsertarAreaCentroCostResponse response = new InsertarAreaCentroCostResponse();
		try
		{
			if (request.getIdPadre() != null && request.getIdPadre() == 0)
			{
				request.setIdPadre(null);
			}
			if (request.getIdPadre().SIZE == 0)
			{
				request.setIdPadre(null);
			}

			response = areaCentroCostoService.insertarArea(codUsuario, idInstancia, request);
			response.setInsertar(response.getInsertar());
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se pudo guardar los datos");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);

		}

		return response;

	}

	@RequestMapping(value = "/actualizarArea", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ActualizarAreaCentroCostResponse ActualizarArea(@RequestBody ActualizarAreaCentroCostRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{

		ActualizarAreaCentroCostResponse response = new ActualizarAreaCentroCostResponse();
		try
		{
			response = areaCentroCostoService.actualizarArea(codUsuario, idInstancia, request);
			response.setActualizado(response.getActualizado());
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible actualizar el Area");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;

	}

	@RequestMapping(value = "/listarCentroxArea", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ListarCentroCostoxAreaResponse listarxArea(@RequestBody ListarCentroCostoxAreaRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{
		ListarCentroCostoxAreaResponse response = new ListarCentroCostoxAreaResponse();

		try
		{
			response = areaCentroCostoService.listarCentroCostoxArea(codUsuario, idInstancia, request);
			String codError = Constantes.ESTADO_TRAMA_OK + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Se cargo la lista correctamente");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar los Telefono Claves");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}

		return response;
	}

	@RequestMapping(value = "/eliminarIdArea", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public EliminarCentroCostoxAreaResponse EliminarArea(@RequestBody EliminarCentroCostoxAreaRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia)
	{

		EliminarCentroCostoxAreaResponse response = new EliminarCentroCostoxAreaResponse();
		try
		{
			response = areaCentroCostoService.eliminarCentCostxArea(codUsuario, idInstancia, request);
			response.setEliminar(response.getEliminar());
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible eliminar el Area");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;
	}

}

package pe.com.tintegro.controller;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ActualizarCustomTrunkRequest;
import pe.com.tintegro.dto.request.EliminarCustomTrunkRequest;
import pe.com.tintegro.dto.request.InsertarCustomTrunkRequest;
import pe.com.tintegro.dto.request.ListaCustomTrunkRequest;
import pe.com.tintegro.dto.response.ActualizarCustomTrunkResponse;
import pe.com.tintegro.dto.response.EliminarCustomTrunkResponse;
import pe.com.tintegro.dto.response.InsertarCustomTrunkResponse;
import pe.com.tintegro.dto.response.ListaCustomTrunkResponse;
import pe.com.tintegro.services.CustomTrunkServices;
import pe.com.tintegro.services.util.Util;

@RestController
@RequestMapping("/customTrunk")
public class CustomTrunkController
{
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());
	
	@Resource(name="customTrunkServices")
	protected CustomTrunkServices customTrunkServices;
	
	@RequestMapping(value="/listaCustomTrunk", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value=HttpStatus.OK)
	public ListaCustomTrunkResponse listaCustomTrunk(@RequestBody ListaCustomTrunkRequest request,
			@RequestHeader("codUsuario") String codUsuario,
			@RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia){
		
		ListaCustomTrunkResponse response=new ListaCustomTrunkResponse();
		try
		{
			response=customTrunkServices.listarCustomTrunkServices(codUsuario, idInstancia, request);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible listar los CustomTrunk");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		
		
		return response;
	}
	
	@RequestMapping(value="/insertaCustomTrunk", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value=HttpStatus.OK)
	public InsertarCustomTrunkResponse insertaCustomTrunk(@RequestBody InsertarCustomTrunkRequest request,
			@RequestHeader("codUsuario") String codUsuario,
			@RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia){
		
		
		InsertarCustomTrunkResponse response=new InsertarCustomTrunkResponse();
		
		try
		{
			response=customTrunkServices.registrarCustomTrunkServices(codUsuario, idInstancia, request);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la insercion de customtrunk");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;
		
	}
	@RequestMapping(value="/actualizaCustomTrunk", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value=HttpStatus.OK)
	public ActualizarCustomTrunkResponse actualizarCustomTrunk(@RequestBody ActualizarCustomTrunkRequest request,
			@RequestHeader("codUsuario") String codUsuario,
			@RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia){
		ActualizarCustomTrunkResponse response=new ActualizarCustomTrunkResponse();
		try
		{
			response=customTrunkServices.actualizarCustomTrunkServices(codUsuario, idInstancia, request);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible actualizar custom trunk");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;
	}
	
	@RequestMapping(value="/eliminaCustomTrunk", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value=HttpStatus.OK)
	public EliminarCustomTrunkResponse eliminarCustomTrunk(@RequestBody EliminarCustomTrunkRequest request,
			@RequestHeader("codUsuario") String codUsuario,
			@RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia){
		
		
		EliminarCustomTrunkResponse response=new EliminarCustomTrunkResponse();
		
		try
		{
			response=customTrunkServices.eliminarCustomTrunkServices(codUsuario, idInstancia, request);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la eliminar de customtrunk");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;
		
	}
}

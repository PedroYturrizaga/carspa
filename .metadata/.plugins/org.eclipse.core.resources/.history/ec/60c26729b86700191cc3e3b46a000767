package pe.com.tintegro.controller;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ActualizarPlanMarcacionRequest;
import pe.com.tintegro.dto.request.EliminarPlanMarcacionRequest;
import pe.com.tintegro.dto.request.InsertarPlanMarcacionRequest;
import pe.com.tintegro.dto.request.ListarAnexoRequest;
import pe.com.tintegro.dto.request.ListarBuzonRequest;
import pe.com.tintegro.dto.request.ListarContextoRequest;
import pe.com.tintegro.dto.request.ListarFaxRequest;
import pe.com.tintegro.dto.request.ListarNoIvrRequest;
import pe.com.tintegro.dto.request.ListarPlanMarcacionRequest;
import pe.com.tintegro.dto.response.ActualizarPlanMarcacionResponse;
import pe.com.tintegro.dto.response.EliminarPlanMarcacionResponse;
import pe.com.tintegro.dto.response.InsertarPlanMarcacionResponse;
import pe.com.tintegro.dto.response.ListarAnexoResponse;
import pe.com.tintegro.dto.response.ListarBuzonResponse;
import pe.com.tintegro.dto.response.ListarContextoResponse;
import pe.com.tintegro.dto.response.ListarFaxResponse;
import pe.com.tintegro.dto.response.ListarNoIvrResponse;
import pe.com.tintegro.dto.response.ListarPlanMarcacionResponse;
import pe.com.tintegro.services.PlanMarcacionServices;
import pe.com.tintegro.services.util.Util;

@RestController
@RequestMapping("/planMarcacion")
public class PlanMarcacionController
{
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());
	@Resource(name = "planMarcacionServices")
	protected PlanMarcacionServices planMarcacionServices;	

	@RequestMapping(value = "/insertar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public InsertarPlanMarcacionResponse insertarAgentePorCola(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody InsertarPlanMarcacionRequest request){
		
		InsertarPlanMarcacionResponse response =new InsertarPlanMarcacionResponse();
		try
		{
			response = planMarcacionServices.insertarPlanMarcacion(codUsuario, idInstancia, request);
//			response.setInsertado(response.getInsertado());
//
//			if (response.getInsertado() == 1)
//			{
//				response.setMensaje("Plan Entrante insertado");
//			}
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido insertar Plan Marc.");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}
	
	@RequestMapping(value = "/listar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarPlanMarcacionResponse listarPlanMarcacion(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarPlanMarcacionRequest request){
		
		ListarPlanMarcacionResponse response =new ListarPlanMarcacionResponse();
		try
		{
			response = planMarcacionServices.listarPlanMarcacion(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Lista Plan Marcacion realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido listar Plan Marc.");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}	
	
	@RequestMapping(value = "/actualizar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ActualizarPlanMarcacionResponse actualizarPlanMarcacion(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ActualizarPlanMarcacionRequest request){
		
		ActualizarPlanMarcacionResponse response =new ActualizarPlanMarcacionResponse();
		try
		{
			response = planMarcacionServices.actualizarPlanMarcacion(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Actualizacion de plan de marcacion realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido actualizar Plan Marc.");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}		
	
	@RequestMapping(value = "/eliminar", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public EliminarPlanMarcacionResponse eliminarPlanMarcacion(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody EliminarPlanMarcacionRequest request){
		
		EliminarPlanMarcacionResponse response =new EliminarPlanMarcacionResponse();
		try
		{
			response = planMarcacionServices.eliminarPlanMarcacion(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Eliminacion  Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido eliminar Plan Marc.");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}	
	
	@RequestMapping(value = "/listarContexto", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarContextoResponse listarContexto(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarContextoRequest request){
		
		ListarContextoResponse response =new ListarContextoResponse();
		try
		{
			response = planMarcacionServices.listarContexto(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Lista Contexto Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido listar Contexto");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}		
	
	@RequestMapping(value = "/listarIvr", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarNoIvrResponse listarNorIvr(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarNoIvrRequest request){
		
		ListarNoIvrResponse response =new ListarNoIvrResponse();
		try
		{
			response = planMarcacionServices.listarNoIvr(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Lista no IVR Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido listar Ivr");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}			
	
	@RequestMapping(value = "/listarAnexo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarAnexoResponse listarAnexo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarAnexoRequest request){
		
		ListarAnexoResponse response =new ListarAnexoResponse();
		try
		{
			response = planMarcacionServices.listarAnexo(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Lista Anexo Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido listar Anexo");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}			
	
	@RequestMapping(value = "/listarFax", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarFaxResponse listarFax(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarFaxRequest request){
		
		ListarFaxResponse response =new ListarFaxResponse();
		try
		{
			response = planMarcacionServices.listarFax(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Lista Fax Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido listar Fax");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}		
	
	@RequestMapping(value = "/listarBuzon", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)	
	public ListarBuzonResponse listarBuzon(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarBuzonRequest request){
		
		ListarBuzonResponse response =new ListarBuzonResponse();
		try
		{
			response = planMarcacionServices.listarBuzon(codUsuario, idInstancia,request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			response.setMensaje("Consulta de Lista Buzon Realizada");
		}
		catch (Exception ex)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No se ha podido listar Buzon");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}		
		return response;
	}		
}

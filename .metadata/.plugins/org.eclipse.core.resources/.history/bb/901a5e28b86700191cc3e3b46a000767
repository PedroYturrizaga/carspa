package pe.com.tintegro.controller;
import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ActualizaPerifoneoRequest;
import pe.com.tintegro.dto.request.BuscarAnexoRequest;
import pe.com.tintegro.dto.request.EliminaPerifoneoRequest;
import pe.com.tintegro.dto.request.EliminarExtensionPerifoneoRequest;
import pe.com.tintegro.dto.request.InsertaExtensionPerifoneoRequest;
import pe.com.tintegro.dto.request.InsertaPerifoneoRequest;
import pe.com.tintegro.dto.request.ListaPerifoneoRequest;
import pe.com.tintegro.dto.request.ListarExtensionPerifoneoRequest;
import pe.com.tintegro.dto.response.ActualizaPerifoneoResponse;
import pe.com.tintegro.dto.response.BuscarAnexoResponse;
import pe.com.tintegro.dto.response.CRUDResponse;
import pe.com.tintegro.dto.response.EliminaPerifoneoResponse;
import pe.com.tintegro.dto.response.InsertaExtensionPerifoneoResponse;
import pe.com.tintegro.dto.response.InsertaPerifoneoResponse;
import pe.com.tintegro.dto.response.ListaPerifoneoResponse;
import pe.com.tintegro.dto.response.ListarExtensionPerifoneoResponse;
import pe.com.tintegro.services.PerifoneoServices;
import pe.com.tintegro.services.util.Util;

@RestController
@RequestMapping("/perifoneo")
public class PerifoneoController {
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());
	@Resource(name = "perifoneoServices")
	private PerifoneoServices perifoneoServices;
	
	@RequestMapping(value = "/lista-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ListaPerifoneoResponse listaPerifoneo(@RequestBody ListaPerifoneoRequest request,@RequestHeader("codUsuario") String codUsuario,@RequestHeader("token") String token,@RequestHeader("idInstancia") String idInstancia) {
		ListaPerifoneoResponse response = new ListaPerifoneoResponse();
		try {
			System.out.println("Codigo Perifoneo: "+request.getIdPerifoneo() );
			response = perifoneoServices.listaPerifoneoServices(codUsuario,idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);

		} catch (Exception ex) {
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar los codigos de Perifoneo");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}
		return response;
	}
	
	@RequestMapping(value = "/inserta-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public InsertaPerifoneoResponse insertaPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody InsertaPerifoneoRequest request){
		InsertaPerifoneoResponse response = new InsertaPerifoneoResponse();
		try
		{
			response = perifoneoServices.insertaPerifoneoServices(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la inserción del perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;

	}
	
	@RequestMapping(value = "/actualiza-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ActualizaPerifoneoResponse actualizaPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ActualizaPerifoneoRequest request){
		ActualizaPerifoneoResponse response = new ActualizaPerifoneoResponse();
		try
		{
			response = perifoneoServices.actualizaPerifoneoServices(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la actualizacion del perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;

	}

	@RequestMapping(value = "/eliminar-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public EliminaPerifoneoResponse eliminarPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody EliminaPerifoneoRequest request){
		EliminaPerifoneoResponse response = new EliminaPerifoneoResponse();
		try
		{
			response = perifoneoServices.eliminaPerifoneoServices(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la eliminacion del perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;

	}

	//
	@RequestMapping(value = "/inserta-extension-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public InsertaExtensionPerifoneoResponse insertaExtensionPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody InsertaExtensionPerifoneoRequest request){
		InsertaExtensionPerifoneoResponse response = new InsertaExtensionPerifoneoResponse();
		try
		{
			response = perifoneoServices.insertaExtensionPerifoneoServices(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
			System.out.println("idPerifoneo ::::: "+request.getIdPerifoneo());
			System.out.println("Extensiones nuevas ::::: "+request.getExtensionPerifoneo());
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la inserción de la extension del  perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;

	}
	
	@RequestMapping(value = "/lista-extension-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ListarExtensionPerifoneoResponse listaExtensionPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody ListarExtensionPerifoneoRequest request){
		ListarExtensionPerifoneoResponse response = new ListarExtensionPerifoneoResponse();
		try
		{
			response = perifoneoServices.listaExtensionPerifoneoServices(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la inserción de la extension del  perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;
	}
	
	@RequestMapping(value = "/buscar-anexo-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public BuscarAnexoResponse buscarAnexoPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody BuscarAnexoRequest request){
		BuscarAnexoResponse response = new BuscarAnexoResponse();
		try
		{
			response = perifoneoServices.buscarAnexoPerifoneo(codUsuario, idInstancia, request);
			response.setEstado(Constantes.ESTADO_TRAMA_OK);
//			response.setMensaje("No ha sido posible la inserción de la extension del  perifoneo");
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la inserción de la extension del  perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;

	}
	@RequestMapping(value = "/elimina-extension-perifoneo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public CRUDResponse eliminaExtensionPerifoneo(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token, @RequestHeader("idInstancia") String idInstancia,
			@RequestBody EliminarExtensionPerifoneoRequest request){
		CRUDResponse response = new CRUDResponse();
		try
		{
			response = perifoneoServices.eliminarExtensionPerifoneo(codUsuario, idInstancia, request);
		}
		catch (Exception e)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible la inserción de la extension del  perifoneo");
			System.out.println(e.getMessage());
			LOGGER.error(codError, e);
		}
		return response;

	}
}

package pe.com.tintegro.controller;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import pe.com.tintegro.dao.util.Constantes;
import pe.com.tintegro.dto.request.ADStatusRequest;
import pe.com.tintegro.dto.request.ActualizarDhcpRequest;
import pe.com.tintegro.dto.request.EliminarDetalleDhcpRequest;
import pe.com.tintegro.dto.request.EliminarDhcpRequest;
import pe.com.tintegro.dto.request.InsertarDhcpRequest;
import pe.com.tintegro.dto.request.LeerEstadoDhcpRequest;
import pe.com.tintegro.dto.request.ListarDetalleDhcpRequest;
import pe.com.tintegro.dto.request.ListarDhcpRequest;
import pe.com.tintegro.dto.response.ADStatusResponse;
import pe.com.tintegro.dto.response.ActualizarDhcpResponse;
import pe.com.tintegro.dto.response.EliminarDetalleDhcpResponse;
import pe.com.tintegro.dto.response.EliminarDhcpResponse;
import pe.com.tintegro.dto.response.InsertarDhcpResponse;
import pe.com.tintegro.dto.response.LeerEstadoDhcpResponse;
import pe.com.tintegro.dto.response.ListarDetalleDhcpResponse;
import pe.com.tintegro.dto.response.ListarDhcpResponse;
import pe.com.tintegro.dto.response.ObtenerIpDisponibleResponse;
import pe.com.tintegro.services.DhcpServices;
import pe.com.tintegro.services.util.Util;

@RestController
@RequestMapping("/dhcp")
public class DhcpController {
	protected transient final Logger LOGGER = Logger.getLogger(this.getClass());
	@Autowired
	private DhcpServices dhcpServices;

	@RequestMapping(value = "/lista-dhcp", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ListarDhcpResponse listarDhcp(@RequestBody ListarDhcpRequest request,@RequestHeader("codUsuario") String codUsuario,@RequestHeader("token") String token,@RequestHeader("idInstancia") String idInstancia) {
		ListarDhcpResponse response = new ListarDhcpResponse();
		try {
			response = dhcpServices.listarDhcp(codUsuario,idInstancia, request);

		} catch (Exception ex) {
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP+ Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar la Lista");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}
		return response;
	}
	
	@RequestMapping(value = "/lista-detalle-dhcp", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ListarDetalleDhcpResponse listaDetalleDhcp(@RequestBody ListarDetalleDhcpRequest request,@RequestHeader("codUsuario") String codUsuario,	@RequestHeader("token") String token,@RequestHeader("idInstancia") String idInstancia) {
		ListarDetalleDhcpResponse response = new ListarDetalleDhcpResponse();
		try {
			System.out.println(request.getIdDhcp());

			response = dhcpServices.listarDetalleDhcp(codUsuario,idInstancia, request);

		} catch (Exception ex) {
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP
					+ Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar la Lista");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}
		return response;
	}

	@RequestMapping(value = "/eliminar-detalle-dhcp", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public EliminarDetalleDhcpResponse eliminarDetalleDhcp(@RequestBody EliminarDetalleDhcpRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia)
	{
		EliminarDetalleDhcpResponse response = new EliminarDetalleDhcpResponse();
		try
		{
			System.out.println("\n codigo Dhcp: "+request.getIdDhcp()+"\n codigo Sip: "+request.getIdSip());
			response = dhcpServices.eliminarDetalleDhcp(codUsuario, idInstancia, request);
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible eliminar el detalle dhcp");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;

	}
	
	@RequestMapping(value = "/insertar-dhcp", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public InsertarDhcpResponse insertarDhcp(@RequestBody InsertarDhcpRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia)
	{
		InsertarDhcpResponse response = new InsertarDhcpResponse();
		try
		{
			System.out.println("\n Red: "+request.getRed()+"\n Gateway: "+request.getGateway()+
					"\n Mascara: "+request.getMascara()+"\n RangoMenor: "+request.getRangoMenor()+
					"\n Rango Mayor: "+request.getRangoMayor()+"\n Dns1: "+request.getDns1()+
					"\n Dns2: "+request.getDns2());
			response = dhcpServices.insertarDhcp(codUsuario, idInstancia, request);
			
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible insertar el dhcp");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;

	}
	
	@RequestMapping(value = "/actualizar-dhcp", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ActualizarDhcpResponse actualizarDhcp(@RequestBody ActualizarDhcpRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia)
	{
		ActualizarDhcpResponse response = new ActualizarDhcpResponse();
		try
		{
			System.out.println("\n Codigo: "+request.getIdDhcp()+"\n Red: "+request.getRed()+"\n Gateway: "+request.getGateway()+
					"\n Mascara: "+request.getMascara()+"\n RangoMenor: "+request.getRangoMenor()+
					"\n Rango Mayor: "+request.getRangoMayor()+"\n Dns1: "+request.getDns1()+
					"\n Dns2: "+request.getDns2());
			response = dhcpServices.actualizarDhcp(codUsuario, idInstancia, request);
			
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible actulizar el dhcp");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}

		return response;

	}
	
	@RequestMapping(value = "/verifyStatus", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public LeerEstadoDhcpResponse LeerEstadoDhcp(@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia,LeerEstadoDhcpRequest request) throws Exception
	{
		LeerEstadoDhcpResponse response=new LeerEstadoDhcpResponse();
		try
		{
					response=dhcpServices.LeerEstadoDhcp(codUsuario, idInstancia, request);
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
		}

		return response;

	}
	
	@RequestMapping(value = "/adStatus", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ADStatusResponse ADEstadoDhcp(@RequestBody ADStatusRequest request  ,@RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia) throws Exception
	{
		ADStatusResponse response=new ADStatusResponse();
		try
		{
			response =dhcpServices.ADEstadoDhcp(codUsuario, idInstancia, request);
		}
		catch (Exception exception)
		{
			System.out.println(exception.getMessage());
		}

		return response;

	}
	
	@RequestMapping(value = "/eliminar-dhcp", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public EliminarDhcpResponse eliminarDhcp(@RequestBody EliminarDhcpRequest request, @RequestHeader("codUsuario") String codUsuario, @RequestHeader("token") String token,
			@RequestHeader("idInstancia") String idInstancia)
	{
		EliminarDhcpResponse response = new EliminarDhcpResponse();
		try
		{
			System.out.println("\n Codigo: "+request.getIdDhcp());
			response = dhcpServices.eliminarDhcp(codUsuario, idInstancia, request);
			
		}
		catch (Exception exception)
		{
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP + Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible eliminar el dhcp");
			System.out.println(exception.getMessage());
			LOGGER.error(codError, exception);
		}
		return response;
	}
	
	@RequestMapping(value = "/lista-ip", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseStatus(value = HttpStatus.OK)
	public ObtenerIpDisponibleResponse listarIp(@RequestHeader("codUsuario") String codUsuario,@RequestHeader("token") String token,@RequestHeader("idInstancia") String idInstancia) {
		ObtenerIpDisponibleResponse response = new ObtenerIpDisponibleResponse();
		try {
			response = dhcpServices.listarIPDominio(codUsuario, idInstancia);

		} catch (Exception ex) {
			response.setEstado(Constantes.ESTADO_TRAMA_ERROR_APP);
			String codError = Constantes.ID_ERROR_APP+ Util.getCodigoErrorByDate();
			response.setCodError(codError);
			response.setMensaje("No ha sido posible mostrar ip");
			System.out.println(ex.getMessage());
			LOGGER.error(codError, ex);
		}
		return response;
	}	
	
}
